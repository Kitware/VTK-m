//=============================================================================
//
//  Copyright (c) Kitware, Inc.
//  All rights reserved.
//  See LICENSE.txt for details.
//
//  This software is distributed WITHOUT ANY WARRANTY; without even
//  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//  PURPOSE.  See the above copyright notice for more information.
//
//=============================================================================

$# This file uses the pyexpander macro processing utility to build the
$# FunctionInterface facilities that use a variable number of arguments.
$# Information, documentation, and downloads for pyexpander can be found at:
$#
$#     http://pyexpander.sourceforge.net/
$#
$# To build the source code, execute the following (after installing
$# pyexpander, of course):
$#
$#     expander.py VariantDetail.h.in > VariantDetail.h
$#
$# Ignore the following comment. It is meant for the generated file.
// **** DO NOT EDIT THIS FILE!!! ****
// This file is automatically generated by VariantDetail.h.in
#ifndef vtk_m_MarchingCellTables_h
#define vtk_m_MarchingCellTables_h
$py(
shape_names = (
  "CELL_SHAPE_EMPTY",
  "CELL_SHAPE_VERTEX",
  "CELL_SHAPE_POLY_VERTEX",
  "CELL_SHAPE_LINE",
  "CELL_SHAPE_POLY_LINE",
  "CELL_SHAPE_TRIANGLE",
  "CELL_SHAPE_TRIANGLE_STRIP",
  "CELL_SHAPE_POLYGON",
  "CELL_SHAPE_PIXEL",
  "CELL_SHAPE_QUAD",
  "CELL_SHAPE_TETRA",
  "CELL_SHAPE_VOXEL",
  "CELL_SHAPE_HEXAHEDRON",
  "CELL_SHAPE_WEDGE",
  "CELL_SHAPE_PYRAMID",
)
shape_tables = {
  "CELL_SHAPE_EMPTY" : [],
  "CELL_SHAPE_VERTEX" : [],
  # TODO
  "CELL_SHAPE_LINE" : [],
  # Special implementation
  "CELL_SHAPE_POLY_LINE" : [],
  # TODO
  "CELL_SHAPE_TRIANGLE" : [],
  # Special implementation
  "CELL_SHAPE_POLYGON" : [],
  # TODO
  "CELL_SHAPE_QUAD" : [],
  "CELL_SHAPE_TETRA" : [
    [],
    [(0, 3, 2)],
    [(0, 1, 4)],
    [(1, 4, 2), (2, 4, 3)],
    [(1, 2, 5)],
    [(0, 3, 5), (0, 5, 1)],
    [(0, 2, 5), (0, 5, 4)],
    [(5, 4, 3)],
    [(3, 4, 5)],
    [(4, 5, 0), (5, 2, 0)],
    [(1, 5, 0), (5, 3, 0)],
    [(5, 2, 1)],
    [(3, 4, 2), (2, 4, 1)],
    [(4, 1, 0)],
    [(2, 3, 0)],
    []
  ],
  # TODO: Edges 11 and 10 may need to be swapped
  "CELL_SHAPE_HEXAHEDRON" : [
    [],
    [(0,  8,  3)],
    [(0,  1,  9)],
    [(1,  8,  3),  (9,  8,  1)],
    [(1,  2,  11)],
    [(0,  8,  3),  (1,  2,  11)],
    [(9,  2,  11), (0,  2,  9)],
    [(2,  8,  3),  (2,  11, 8),  (11, 9,  8)],
    [(3,  10, 2)],
    [(0,  10, 2),  (8,  10, 0)],
    [(1,  9,  0),  (2,  3,  10)],
    [(1,  10, 2),  (1,  9,  10), (9,  8,  10)],
    [(3,  11, 1),  (10, 11, 3)],
    [(0,  11, 1),  (0,  8,  11), (8,  10, 11)],
    [(3,  9,  0),  (3,  10, 9),  (10, 11, 9)],
    [(9,  8,  11), (11, 8,  10)],
    [(4,  7,  8)],
    [(4,  3,  0),  (7,  3,  4)],
    [(0,  1,  9),  (8,  4,  7)],
    [(4,  1,  9),  (4,  7,  1),  (7,  3,  1)],
    [(1,  2,  11), (8,  4,  7)],
    [(3,  4,  7),  (3,  0,  4),  (1,  2, 11)],
    [(9,  2,  11), (9,  0,  2),  (8,  4,  7)],
    [(2,  11, 9),  (2,  9,  7),  (2,  7,  3),  (7,  9,  4)],
    [(8,  4,  7),  (3,  10, 2)],
    [(10, 4,  7),  (10, 2,  4),  (2,  0,  4)],
    [(9,  0,  1),  (8,  4,  7),  (2,  3,  10)],
    [(4,  7,  10), (9,  4,  10), (9,  10, 2),  (9,  2,  1)],
    [(3,  11, 1),  (3,  10, 11), (7,  8,  4)],
    [(1,  10, 11), (1,  4,  10), (1,  0,  4),  (7,  10, 4)],
    [(4,  7,  8),  (9,  0,  10), (9,  10, 11), (10, 0,  3)],
    [(4,  7,  10), (4,  10, 9),  (9,  10, 11)],
    [(9,  5,  4)],
    [(9,  5,  4),  (0,  8,  3)],
    [(0,  5,  4),  (1,  5,  0)],
    [(8,  5,  4),  (8,  3,  5),  (3,  1,  5)],
    [(1,  2,  11), (9,  5,  4)],
    [(3,  0,  8),  (1,  2,  11), (4,  9,  5)],
    [(5,  2,  11), (5,  4,  2),  (4,  0,  2)],
    [(2,  11, 5),  (3,  2,  5),  (3,  5,  4),  (3,  4,  8)],
    [(9,  5,  4),  (2,  3,  10)],
    [(0,  10, 2),  (0,  8,  10), (4,  9,  5)],
    [(0,  5,  4),  (0,  1,  5),  (2,  3,  10)],
    [(2,  1,  5),  (2,  5,  8),  (2,  8,  10), (4,  8,  5)],
    [(11, 3,  10), (11, 1,  3),  (9,  5,  4)],
    [(4,  9,  5),  (0,  8,  1),  (8,  11, 1),  (8,  10, 11)],
    [(5,  4,  0),  (5,  0,  10), (5,  10, 11), (10, 0,  3)],
    [(5,  4,  8),  (5,  8,  11), (11, 8,  10)],
    [(9,  7,  8),  (5,  7,  9)],
    [(9,  3,  0),  (9,  5,  3),  (5,  7,  3)],
    [(0,  7,  8),  (0,  1,  7),  (1,  5,  7)],
    [(1,  5,  3),  (3,  5,  7)],
    [(9,  7,  8),  (9,  5,  7),  (11, 1,  2)],
    [(11, 1,  2),  (9,  5,  0),  (5,  3,  0),  (5,  7,  3)],
    [(8,  0,  2),  (8,  2,  5),  (8,  5,  7),  (11, 5,  2)],
    [(2,  11, 5),  (2,  5,  3),  (3,  5,  7)],
    [(7,  9,  5),  (7,  8,  9),  (3,  10, 2)],
    [(9,  5,  7),  (9,  7,  2),  (9,  2,  0),  (2,  7,  10)],
    [(2,  3,  10), (0,  1,  8),  (1,  7,  8),  (1,  5,  7)],
    [(10, 2,  1),  (10, 1,  7),  (7,  1,  5)],
    [(9,  5,  8),  (8,  5,  7),  (11, 1,  3),  (11, 3,  10)],
    [(5,  7,  0),  (5,  0,  9),  (7,  10, 0),  (1,  0,  11), (10, 11, 0)],
    [(10, 11, 0),  (10, 0,  3),  (11, 5,  0),  (8,  0,  7),  (5,  7,  0)],
    [(10, 11, 5),  (7,  10, 5)],
    [(11, 6,  5)],
    [(0,  8,  3),  (5,  11, 6)],
    [(9,  0,  1),  (5,  11, 6)],
    [(1,  8,  3),  (1,  9,  8),  (5,  11, 6)],
    [(1,  6,  5),  (2,  6,  1)],
    [(1,  6,  5),  (1,  2,  6),  (3,  0,  8)],
    [(9,  6,  5),  (9,  0,  6),  (0,  2,  6)],
    [(5,  9,  8),  (5,  8,  2),  (5,  2,  6),  (3,  2,  8)],
    [(2,  3,  10), (11, 6,  5)],
    [(10, 0,  8),  (10, 2,  0),  (11, 6,  5)],
    [(0,  1,  9),  (2,  3,  10), (5,  11, 6)],
    [(5,  11, 6),  (1,  9,  2),  (9,  10, 2),  (9,  8,  10)],
    [(6,  3,  10), (6,  5,  3),  (5,  1,  3)],
    [(0,  8,  10), (0,  10, 5),  (0,  5,  1),  (5,  10, 6)],
    [(3,  10, 6),  (0,  3,  6),  (0,  6,  5),  (0,  5,  9)],
    [(6,  5,  9),  (6,  9,  10), (10, 9,  8)],
    [(5,  11, 6),  (4,  7,  8)],
    [(4,  3,  0),  (4,  7,  3),  (6,  5,  11)],
    [(1,  9,  0),  (5,  11, 6),  (8,  4,  7)],
    [(11, 6,  5),  (1,  9,  7),  (1,  7,  3),  (7,  9,  4)],
    [(6,  1,  2),  (6,  5,  1),  (4,  7,  8)],
    [(1,  2,  5),  (5,  2,  6),  (3,  0,  4),  (3,  4,  7)],
    [(8,  4,  7),  (9,  0,  5),  (0,  6,  5),  (0,  2,  6)],
    [(7,  3,  9),  (7,  9,  4),  (3,  2,  9),  (5,  9,  6),  (2,  6,  9)],
    [(3,  10, 2),  (7,  8,  4),  (11, 6,  5)],
    [(5,  11, 6),  (4,  7,  2),  (4,  2,  0),  (2,  7,  10)],
    [(0,  1,  9),  (4,  7,  8),  (2,  3,  10), (5,  11, 6)],
    [(9,  2,  1),  (9,  10, 2),  (9,  4,  10), (7,  10, 4),  (5,  11, 6)],
    [(8,  4,  7),  (3,  10, 5),  (3,  5,  1),  (5,  10, 6)],
    [(5,  1,  10), (5,  10, 6),  (1,  0,  10), (7,  10, 4),  (0,  4,  10)],
    [(0,  5,  9),  (0,  6,  5),  (0,  3,  6),  (10, 6,  3),  (8,  4,  7)],
    [(6,  5,  9),  (6,  9,  10), (4,  7,  9),  (7,  10, 9)],
    [(11, 4,  9),  (6,  4,  11)],
    [(4,  11, 6),  (4,  9,  11), (0,  8,  3)],
    [(11, 0,  1),  (11, 6,  0),  (6,  4,  0)],
    [(8,  3,  1),  (8,  1,  6),  (8,  6,  4),  (6,  1,  11)],
    [(1,  4,  9),  (1,  2,  4),  (2,  6,  4)],
    [(3,  0,  8),  (1,  2,  9),  (2,  4,  9),  (2,  6,  4)],
    [(0,  2,  4),  (4,  2,  6)],
    [(8,  3,  2),  (8,  2,  4),  (4,  2,  6)],
    [(11, 4,  9),  (11, 6,  4),  (10, 2,  3)],
    [(0,  8,  2),  (2,  8,  10), (4,  9,  11), (4,  11, 6)],
    [(3,  10, 2),  (0,  1,  6),  (0,  6,  4),  (6,  1,  11)],
    [(6,  4,  1),  (6,  1,  11), (4,  8,  1),  (2,  1,  10), (8,  10, 1)],
    [(9,  6,  4),  (9,  3,  6),  (9,  1,  3),  (10, 6,  3)],
    [(8,  10, 1),  (8,  1,  0),  (10, 6,  1),  (9,  1,  4),  (6,  4,  1)],
    [(3,  10, 6),  (3,  6,  0),  (0,  6,  4)],
    [(6,  4,  8),  (10, 6,  8)],
    [(7,  11, 6),  (7,  8,  11), (8,  9,  11)],
    [(0,  7,  3),  (0,  11, 7),  (0,  9,  11), (6,  7,  11)],
    [(11, 6,  7),  (1,  11, 7),  (1,  7,  8),  (1,  8,  0)],
    [(11, 6,  7),  (11, 7,  1),  (1,  7,  3)],
    [(1,  2,  6),  (1,  6,  8),  (1,  8,  9),  (8,  6,  7)],
    [(2,  6,  9),  (2,  9,  1),  (6,  7,  9),  (0,  9,  3),  (7,  3,  9)],
    [(7,  8,  0),  (7,  0,  6),  (6,  0,  2)],
    [(7,  3,  2),  (6,  7,  2)],
    [(2,  3,  10), (11, 6,  8),  (11, 8,  9),  (8,  6,  7)],
    [(2,  0,  7),  (2,  7,  10), (0,  9,  7),  (6,  7,  11), (9,  11, 7)],
    [(1,  8,  0),  (1,  7,  8),  (1,  11, 7),  (6,  7,  11), (2,  3,  10)],
    [(10, 2,  1),  (10, 1,  7),  (11, 6,  1),  (6,  7,  1)],
    [(8,  9,  6),  (8,  6,  7),  (9,  1,  6),  (10, 6,  3),  (1,  3,  6)],
    [(0,  9,  1),  (10, 6,  7)],
    [(7,  8,  0),  (7,  0,  6),  (3,  10, 0),  (10, 6,  0)],
    [(7,  10, 6)],
    [(7,  6,  10)],
    [(3,  0,  8),  (10, 7,  6)],
    [(0,  1,  9),  (10, 7,  6)],
    [(8,  1,  9),  (8,  3,  1),  (10, 7,  6)],
    [(11, 1,  2),  (6,  10, 7)],
    [(1,  2,  11), (3,  0,  8),  (6,  10, 7)],
    [(2,  9,  0),  (2,  11, 9),  (6,  10, 7)],
    [(6,  10, 7),  (2,  11, 3),  (11, 8,  3),  (11, 9,  8)],
    [(7,  2,  3),  (6,  2,  7)],
    [(7,  0,  8),  (7,  6,  0),  (6,  2,  0)],
    [(2,  7,  6),  (2,  3,  7),  (0,  1,  9)],
    [(1,  6,  2),  (1,  8,  6),  (1,  9,  8),  (8,  7,  6)],
    [(11, 7,  6),  (11, 1,  7),  (1,  3,  7)],
    [(11, 7,  6),  (1,  7,  11), (1,  8,  7),  (1,  0,  8)],
    [(0,  3,  7),  (0,  7,  11), (0,  11, 9),  (6,  11, 7)],
    [(7,  6,  11), (7,  11, 8),  (8,  11, 9)],
    [(6,  8,  4),  (10, 8,  6)],
    [(3,  6,  10), (3,  0,  6),  (0,  4,  6)],
    [(8,  6,  10), (8,  4,  6),  (9,  0,  1)],
    [(9,  4,  6),  (9,  6,  3),  (9,  3,  1),  (10, 3,  6)],
    [(6,  8,  4),  (6,  10, 8),  (2,  11, 1)],
    [(1,  2,  11), (3,  0,  10), (0,  6,  10), (0,  4,  6)],
    [(4,  10, 8),  (4,  6,  10), (0,  2,  9),  (2,  11, 9)],
    [(11, 9,  3),  (11, 3,  2),  (9,  4,  3),  (10, 3,  6),  (4,  6,  3)],
    [(8,  2,  3),  (8,  4,  2),  (4,  6,  2)],
    [(0,  4,  2),  (4,  6,  2)],
    [(1,  9,  0),  (2,  3,  4),  (2,  4,  6),  (4,  3,  8)],
    [(1,  9,  4),  (1,  4,  2),  (2,  4,  6)],
    [(8,  1,  3),  (8,  6,  1),  (8,  4,  6),  (6,  11, 1)],
    [(11, 1,  0),  (11, 0,  6),  (6,  0,  4)],
    [(4,  6,  3),  (4,  3,  8),  (6,  11, 3),  (0,  3,  9),  (11, 9,  3)],
    [(11, 9,  4),  (6,  11, 4)],
    [(4,  9,  5),  (7,  6,  10)],
    [(0,  8,  3),  (4,  9,  5),  (10, 7,  6)],
    [(5,  0,  1),  (5,  4,  0),  (7,  6,  10)],
    [(10, 7,  6),  (8,  3,  4),  (3,  5,  4),  (3,  1,  5)],
    [(9,  5,  4),  (11, 1,  2),  (7,  6,  10)],
    [(6,  10, 7),  (1,  2,  11), (0,  8,  3),  (4,  9,  5)],
    [(7,  6,  10), (5,  4,  11), (4,  2, 11),  (4,  0,  2)],
    [(3,  4,  8),  (3,  5,  4),  (3,  2,  5),  (11, 5,  2),  (10, 7,  6)],
    [(7,  2,  3),  (7,  6,  2),  (5,  4,  9)],
    [(9,  5,  4),  (0,  8,  6),  (0,  6,  2),  (6,  8,  7)],
    [(3,  6,  2),  (3,  7,  6),  (1,  5,  0),  (5,  4,  0)],
    [(6,  2,  8),  (6,  8,  7),  (2,  1,  8),  (4,  8,  5),  (1,  5,  8)],
    [(9,  5,  4),  (11, 1,  6),  (1,  7,  6),  (1,  3,  7)],
    [(1,  6,  11), (1,  7,  6),  (1,  0,  7),  (8,  7,  0),  (9,  5,  4)],
    [(4,  0,  11), (4,  11, 5),  (0,  3,  11), (6,  11, 7),  (3,  7,  11)],
    [(7,  6,  11), (7,  11, 8),  (5,  4,  11), (4,  8,  11)],
    [(6,  9,  5),  (6,  10, 9),  (10, 8,  9)],
    [(3,  6,  10), (0,  6,  3),  (0,  5,  6),  (0,  9,  5)],
    [(0,  10, 8),  (0,  5,  10), (0,  1,  5),  (5,  6,  10)],
    [(6,  10, 3),  (6,  3,  5),  (5,  3,  1)],
    [(1,  2,  11), (9,  5,  10), (9,  10, 8),  (10, 5,  6)],
    [(0,  10, 3),  (0,  6,  10), (0,  9,  6),  (5,  6,  9),  (1,  2,  11)],
    [(10, 8,  5),  (10, 5,  6),  (8,  0,  5),  (11, 5,  2),  (0,  2,  5)],
    [(6,  10, 3),  (6,  3,  5),  (2,  11, 3),  (11, 5,  3)],
    [(5,  8,  9),  (5,  2,  8),  (5,  6,  2),  (3,  8,  2)],
    [(9,  5,  6),  (9,  6,  0),  (0,  6,  2)],
    [(1,  5,  8),  (1,  8,  0),  (5,  6,  8),  (3,  8,  2),  (6,  2,  8)],
    [(1,  5,  6),  (2,  1,  6)],
    [(1,  3,  6),  (1,  6,  11), (3,  8,  6),  (5,  6,  9),  (8,  9,  6)],
    [(11, 1,  0),  (11, 0,  6),  (9,  5,  0),  (5,  6,  0)],
    [(0,  3,  8),  (5,  6,  11)],
    [(11, 5,  6)],
    [(10, 5,  11), (7,  5,  10)],
    [(10, 5,  11), (10, 7,  5),  (8,  3,  0)],
    [(5,  10, 7),  (5,  11, 10), (1,  9,  0)],
    [(11, 7,  5),  (11, 10, 7),  (9,  8,  1),  (8,  3,  1)],
    [(10, 1,  2),  (10, 7,  1),  (7,  5,  1)],
    [(0,  8,  3),  (1,  2,  7),  (1,  7,  5),  (7,  2,  10)],
    [(9,  7,  5),  (9,  2,  7),  (9,  0,  2),  (2,  10, 7)],
    [(7,  5,  2),  (7,  2,  10), (5,  9,  2),  (3,  2,  8),  (9,  8,  2)],
    [(2,  5,  11), (2,  3,  5),  (3,  7,  5)],
    [(8,  2,  0),  (8,  5,  2),  (8,  7,  5),  (11, 2,  5)],
    [(9,  0,  1),  (5,  11, 3),  (5,  3,  7),  (3,  11, 2)],
    [(9,  8,  2),  (9,  2,  1),  (8,  7,  2),  (11, 2,  5),  (7,  5,  2)],
    [(1,  3,  5),  (3,  7,  5)],
    [(0,  8,  7),  (0,  7,  1),  (1,  7,  5)],
    [(9,  0,  3),  (9,  3,  5),  (5,  3,  7)],
    [(9,  8,  7),  (5,  9,  7)],
    [(5,  8,  4),  (5,  11, 8),  (11, 10, 8)],
    [(5,  0,  4),  (5,  10, 0),  (5,  11, 10), (10, 3,  0)],
    [(0,  1,  9),  (8,  4,  11), (8,  11, 10), (11, 4,  5)],
    [(11, 10, 4),  (11, 4,  5),  (10, 3,  4),  (9,  4,  1),  (3,  1,  4)],
    [(2,  5,  1),  (2,  8,  5),  (2,  10, 8),  (4,  5,  8)],
    [(0,  4,  10), (0,  10, 3),  (4,  5,  10), (2,  10, 1),  (5,  1,  10)],
    [(0,  2,  5),  (0,  5,  9),  (2,  10, 5),  (4,  5,  8),  (10, 8,  5)],
    [(9,  4,  5),  (2,  10, 3)],
    [(2,  5,  11), (3,  5,  2),  (3,  4,  5),  (3,  8,  4)],
    [(5,  11, 2),  (5,  2,  4),  (4,  2,  0)],
    [(3,  11, 2),  (3,  5,  11), (3,  8,  5),  (4,  5,  8),  (0,  1,  9)],
    [(5,  11, 2),  (5,  2,  4),  (1,  9,  2),  (9,  4,  2)],
    [(8,  4,  5),  (8,  5,  3),  (3,  5,  1)],
    [(0,  4,  5),  (1,  0,  5)],
    [(8,  4,  5),  (8,  5,  3),  (9,  0,  5),  (0,  3,  5)],
    [(9,  4,  5)],
    [(4,  10, 7),  (4,  9,  10), (9,  11, 10)],
    [(0,  8,  3),  (4,  9,  7),  (9,  10, 7),  (9,  11, 10)],
    [(1,  11, 10), (1,  10, 4),  (1,  4,  0),  (7,  4,  10)],
    [(3,  1,  4),  (3,  4,  8),  (1,  11, 4),  (7,  4,  10), (11, 10, 4)],
    [(4,  10, 7),  (9,  10, 4),  (9,  2,  10), (9,  1,  2)],
    [(9,  7,  4),  (9,  10, 7),  (9,  1,  10), (2,  10, 1),  (0,  8,  3)],
    [(10, 7,  4),  (10, 4,  2),  (2,  4,  0)],
    [(10, 7,  4),  (10, 4,  2),  (8,  3,  4),  (3,  2,  4)],
    [(2,  9,  11), (2,  7,  9),  (2,  3,  7),  (7,  4,  9)],
    [(9,  11, 7),  (9,  7,  4),  (11, 2,  7),  (8,  7,  0),  (2,  0,  7)],
    [(3,  7,  11), (3,  11, 2),  (7,  4,  11), (1,  11, 0),  (4,  0,  11)],
    [(1,  11, 2),  (8,  7,  4)],
    [(4,  9,  1),  (4,  1,  7),  (7,  1,  3)],
    [(4,  9,  1),  (4,  1,  7),  (0,  8,  1),  (8,  7,  1)],
    [(4,  0,  3),  (7,  4,  3)],
    [(4,  8,  7)],
    [(9,  11, 8),  (11, 10, 8)],
    [(3,  0,  9),  (3,  9,  10), (10, 9,  11)],
    [(0,  1,  11), (0,  11, 8),  (8,  11, 10)],
    [(3,  1,  11), (10, 3,  11)],
    [(1,  2,  10), (1,  10, 9),  (9,  10, 8)],
    [(3,  0,  9),  (3,  9,  10), (1,  2,  9),  (2,  10, 9)],
    [(0,  2,  10), (8,  0,  10)],
    [(3,  2,  10)],
    [(2,  3,  8),  (2,  8,  11), (11, 8,  9)],
    [(9,  11, 2),  (0,  9,  2)],
    [(2,  3,  8),  (2,  8,  11), (0,  1,  8),  (1,  11, 8)],
    [(1,  11, 2)],
    [(1,  3,  8),  (9,  1,  8)],
    [(0,  9,  1)],
    [(0,  3,  8)],
    [],
  ],
  "CELL_SHAPE_WEDGE" : [
    [],
    [(0,  6,  2)],
    [(0,  1,  7)],
    [(6,  1,  7),  (6,  2,  1)],
    [(1,  2,  8)],
    [(6,  1,  0),  (6,  8,  1)],
    [(0,  2,  8),  (7,  0,  8)],
    [(7,  6,  8)],
    [(3,  5,  6)],
    [(3,  5,  0),  (5,  2,  0)],
    [(0,  1,  7),  (6,  3,  5)],
    [(1,  7,  3),  (1,  3,  5),  (1,  5,  2)],
    [(2,  8,  1),  (6,  3,  5)],
    [(0,  3,  1),  (1,  3,  5),  (1,  5,  8)],
    [(6,  3,  5),  (0,  8,  7),  (0,  2,  8)],
    [(7,  3,  5),  (7,  5,  8)],
    [(7,  4,  3)],
    [(7,  4,  3),  (0,  6,  2)],
    [(0,  1,  3),  (1,  4,  3)],
    [(1,  4,  3),  (1,  3,  6),  (1,  6,  2)],
    [(7,  4,  3),  (2,  8,  1)],
    [(7,  4,  3),  (6,  1,  0),  (6,  8,  1)],
    [(0,  4,  3),  (0,  8,  4),  (0,  2,  8)],
    [(6,  8,  3),  (3,  8,  4)],
    [(6,  7,  4),  (6,  4,  5)],
    [(0,  7,  5),  (7,  4,  5),  (2,  0,  5)],
    [(1,  6,  0),  (1,  5,  6),  (1,  4,  5)],
    [(2,  1,  5),  (5,  1,  4)],
    [(2,  8,  1),  (6,  7,  5),  (7,  4,  5)],
    [(0,  7,  5),  (7,  4,  5),  (0,  5,  1),  (1,  5,  8)],
    [(0,  2,  8),  (0,  8,  4),  (0,  4,  5),  (0,  5,  6)],
    [(8,  4,  5)],
    [(4,  8,  5)],
    [(4,  8,  5),  (0,  6,  2)],
    [(4,  8,  5),  (0,  1,  7)],
    [(4,  8,  5),  (6,  1,  7),  (6,  2,  1)],
    [(1,  5,  4),  (2,  5,  1)],
    [(1,  5,  4),  (1,  6,  5),  (1,  0,  6)],
    [(5,  4,  7),  (5,  7,  0),  (5,  0,  2)],
    [(6,  4,  7),  (6,  5,  4)],
    [(6,  3,  8),  (3,  4,  8)],
    [(0,  3,  4),  (0,  4,  8),  (0,  8,  2)],
    [(7,  0,  1),  (6,  3,  4),  (6,  4,  8)],
    [(1,  7,  3),  (1,  3,  2),  (2,  3,  8),  (8,  3,  4)],
    [(2,  6,  1),  (6,  3,  1),  (3,  4,  1)],
    [(0,  3,  1),  (1,  3,  4)],
    [(7,  0,  4),  (4,  0,  2),  (4,  2,  3),  (3,  2,  6)],
    [(7,  3,  4)],
    [(7,  8,  5),  (7,  5,  3)],
    [(0,  6,  2),  (7,  8,  5),  (7,  5,  3)],
    [(0,  1,  3),  (1,  5,  3),  (1,  8,  5)],
    [(2,  1,  6),  (6,  1,  3),  (5,  1,  8),  (3,  1,  5)],
    [(1,  3,  7),  (1,  5,  3),  (1,  2,  5)],
    [(1,  0,  6),  (1,  6,  5),  (1,  5,  7),  (7,  5,  3)],
    [(0,  2,  5),  (0,  5,  3)],
    [(3,  6,  5)],
    [(7,  8,  6)],
    [(0,  7,  8),  (0,  8,  2)],
    [(0,  1,  6),  (1,  8,  6)],
    [(2,  1,  8)],
    [(6,  7,  1),  (6,  1,  2)],
    [(0,  7,  1)],
    [(0,  2,  6)],
    [],
  ],
  "CELL_SHAPE_PYRAMID" : [
    [],
    [(3,  4,  0)],
    [(5,  1,  0)],
    [(5,  1,  4),  (1,  3,  4)],
    [(6,  2,  1)],
    [(3,  4,  0),  (6,  2,  1)],
    [(5,  2,  0),  (6,  2,  5)],
    [(2,  3,  4),  (2,  4,  6),  (4,  5,  6)],
    [(2,  7,  3)],
    [(2,  7,  4),  (4,  0,  2)],
    [(5,  1,  0),  (2,  7,  3)],
    [(5,  7,  4),  (1,  7,  5),  (2,  7,  1)],
    [(6,  3,  1),  (7,  3,  6)],
    [(4,  6,  7),  (0,  6,  4),  (1,  6,  0)],
    [(7,  5,  6),  (3,  5,  7),  (0,  5,  3)],
    [(7,  4,  5),  (7,  5,  6)],
    [(7,  5,  4),  (7,  6,  5)],
    [(5,  0,  3),  (6,  5,  3),  (7,  6,  3)],
    [(1,  0,  4),  (7,  1,  4),  (6,  1,  7)],
    [(6,  1,  3),  (7,  6,  3)],
    [(7,  5,  4),  (7,  1,  5),  (7,  2,  1)],
    [(3,  7,  0),  (7,  5,  0),  (7,  2,  5),  (2,  1,  5)],
    [(4,  2,  0),  (7,  2,  4)],
    [(7,  2,  3)],
    [(2,  4,  3),  (5,  4,  2),  (6,  5,  2)],
    [(2,  5,  0),  (2,  6,  5)],
    [(6,  1,  0),  (4,  6,  0),  (3,  6,  4),  (3,  2,  6)],
    [(2,  6,  1)],
    [(1,  4,  3),  (1,  5,  4)],
    [(1,  5,  0)],
    [(4,  3,  0)],
    [],
  ],
}
)\

#include <vtkm/CellShape.h>
#include <vtkm/StaticAssert.h>
#include <vtkm/Types.h>

#include <vtkm/cont/ArrayHandle.h>
#include <vtkm/cont/ExecutionObjectBase.h>

namespace vtkm
{
namespace worklet
{
namespace marching_cells
{

// Make sure the table indices are the same as VTK-m's shape IDs.
$for(shape_index in range(len(shape_names)))\
$if(shape_names[shape_index] in shape_tables)\
VTKM_STATIC_ASSERT(vtkm::$(shape_names[shape_index]) == $(shape_index));
$endif\
$endfor\

VTKM_EXEC inline vtkm::IdComponent GetNumTrianglesOffset(vtkm::UInt8 cellType)
{
  // clang-format off
  VTKM_STATIC_CONSTEXPR_ARRAY vtkm::IdComponent offsets[] = {
$py(offset = 0)\
$for(shape_name in shape_names)\
    $(offset), // $(shape_name)
$py(
if shape_name in shape_tables:
  offset = offset + len(shape_tables[shape_name])
else:
  shape_tables[shape_name] = []
)\
$endfor\
    0 // dummy
  };
  // clang-format on

  return offsets[cellType];
}

VTKM_EXEC inline vtkm::UInt8 GetNumTriangles(vtkm::UInt8 cellType, vtkm::UInt8 caseNumber)
{
  // clang-format off
  VTKM_STATIC_CONSTEXPR_ARRAY vtkm::UInt8 numTriangles[] = {
$py(
def num_triangles_list(shape_name):
  result = "    "
  start_case = 0
  display_case = 0
  for triangle_list in shape_tables[shape_name]:
    result = result + str(len(triangle_list)) + ", "
    display_case += 1
    if display_case == 16:
      result = result + "  // cases " + str(start_case) + " - " + str(start_case + display_case - 1) + "\n    "
      start_case += display_case
      display_case = 0
  if display_case == 0:
    result = result[:-4]
  else:
    result += "  // cases " + str(start_case) + " - " + str(start_case + display_case - 1) + "\n"
  return result
)\
$extend(num_triangles_list)\
$for(shape_name in shape_names)\
    // $(shape_name)
$num_triangles_list(shape_name)\
$endfor\
    0 // dummy
  };
  // clang-format on

  vtkm::IdComponent offset = GetNumTrianglesOffset(cellType);
  return numTriangles[offset + caseNumber];
}

VTKM_EXEC inline vtkm::IdComponent GetTriTableOffset(vtkm::UInt8 cellType, vtkm::UInt8 caseNumber)
{
  // clang-format off
  VTKM_STATIC_CONSTEXPR_ARRAY vtkm::IdComponent triTableOffset[] = {
$py(
offset = 0
def table_offset_list(shape_name):
  global offset
  result = "    "
  start_case = 0
  display_case = 0
  for triangle_list in shape_tables[shape_name]:
    result = result + str(offset) + ", "
    offset += len(triangle_list)
    display_case += 1
    if display_case == 8:
      result = result + "  // cases " + str(start_case) + " - " + str(start_case + display_case - 1) + "\n    "
      start_case += display_case
      display_case = 0
  if display_case == 0:
    result = result[:-4]
  else:
    result += "  // cases " + str(start_case) + " - " + str(start_case + display_case - 1) + "\n"
  return result
)\
$extend(table_offset_list)\
$for(shape_name in shape_names)\
    // $(shape_name)
$table_offset_list(shape_name)\
$endfor\
    0 // dummy
  };
  // clang-format on

  vtkm::IdComponent offset = GetNumTrianglesOffset(cellType);
  return triTableOffset[offset + caseNumber];
}

VTKM_EXEC inline const vtkm::UInt8* GetTriangleEdges(vtkm::UInt8 cellType,
                                                     vtkm::UInt8 caseNumber,
                                                     vtkm::UInt8 triangleNumber)
{
  // clang-format off
  VTKM_STATIC_CONSTEXPR_ARRAY vtkm::UInt8 triTable[][3] = {
$py(
def triangles(triangle_list):
  result = ""
  for tri in triangle_list:
    result += "{ " + str(tri[0]) + ", " + str(tri[1]) + ", " + str(tri[2]) + " }, "
  return result
)\
$extend(triangles)\
$for(shape_name in shape_names)\
    // $(shape_name)
$py(casenum = 0)\
$for(triangle_list in shape_tables[shape_name])\
    $triangles(triangle_list)// case $(casenum)
$py(casenum += 1)\
$endfor\
$endfor\
    { 0, 0, 0 } // dummy
  };
  // clang-format on

  vtkm::IdComponent offset = GetTriTableOffset(cellType, caseNumber);
  return triTable[offset + triangleNumber];
}
}
}
} // namespace vtkm::worklet::marching_cells

#endif //vtk_m_MarchingCellTables_h
